#!/usr/bin/env bash

: ${TQL_HOME:=$HOME/tql}
source $TQL_HOME/db_functions

shouldHelpOrExecute "$1" $#; declare -i helpCode=$?
if ((helpCode)); then
    giveHelp "$0" $helpCode procedures
    doExit
fi

readMetadataAndConfigure "$1" routines || doExit

# Extract the option-type arguments
parseOutOptions "$@"
getReturnValues OPTIONS queryArguments
eval set -- $queryArguments

# Parse the TQL and generate the SQL
# Use the query building engine to properly format the WHERE clause.
# No other clauses are customizable in this script.
generateWhereClause "$@"; getReturnValue formattedWheres
WHERE_CLAUSE=$WHERE_PRECLAUSE"$formattedWheres"
formQuery ${qt[SELECT]} "${g_config[standardColumns]}" "$WHERE_CLAUSE" "$LIMIT"
getReturnValue fullQuery

# Display the query if requested
isOptionOn "q|query" $OPTIONS
if (($?)); then
    setError ${rc[SUCCESS]}
    doExit "$fullQuery"
fi

# Execute the query
if ! RAW_RESULT=$("${TQL_DB_WRAPPER:-mysql}" $g_dbClientOptions -t -e "$fullQuery"); then
    setError $?; doExit "Error running query."
fi

# Reformat the result set

# Reduce the result set to a simple pair of columns -- the Sproc names and their bodies.
# (1) Remove the horizontal lines
[[ "$RAW_RESULT" =~ ^[+-]+$'\n'([^+]+)\+[+-]+$'\n'([^+]+)$'\n'\+ ]]
# (2) Remove the column headers, leaving only the data itself.
dataRows="${BASH_REMATCH[2]}" # [1] = column hdr   [2] = data rows
# (3) Array-ify the lines for easier processing
mapfile -t <<< "$dataRows"

# Process the lines.
local lineCount=${#MAPFILE[*]}
for ((i=0; i<lineCount; i++)); do

    # Determine when a new record starts
    if [[ "${MAPFILE[i]}" =~ ^\| ]]; then

        # Break apart the proc name and the proc body
        [[ "${MAPFILE[i]}" =~ ^\|\ ([^ ]*)[\ ]+\|\ (.*) ]]

        # Print the proc name with a banner
        echo "************************************** PROCEDURE NAME: ${BASH_REMATCH[1]} **************************************"

        # Print the top line of the body
        echo ${BASH_REMATCH[2]}

    # Determine when a proc body ends
    elif [[ "${MAPFILE[i]}" =~ (.*)\ \|$ ]]; then

        # Print the last line minus the trailing delimiter
        echo ${BASH_REMATCH[1]}

    else
        # Print the intermediate lines
        echo "${MAPFILE[i]}"
    fi
done

