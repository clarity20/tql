Note 1: The plan is to create a list of open issues in keeping with
common Github practice, but for now this flat ASCII file listing the most
significant TODO items will suffice.

Note 2: TQL is ambitious enough that a full TODO list would be endless. First
of all, there are countless ways to improve upon command-line SQL for greater
terseness and general ease-of-use for the power user. Second of all, the top
priority for this project has always been to build out the feature set to make
the project as useful (and as interesting) as possible. Engineering concerns are
secondary. The code is good but, as with any project, it can be improved
in various ways. This alone gives rise to a fairly extensive TODO list. See the
"Style TODO" section for a start.

Features TODO
    Expression Master: A large architectural change having three major parts.
        The entries in this section are grouped according to the part which
        they apply to. The overarching project will enable the TQL system to
        convert many more kinds of input expressions into valid SQL queries.

        (1) lexer/parser: Implementation nearly done.
            Leftover edge cases: solitary NULLs and minus-sign negation
            Main function body is too long
            Consider an option to ditch spaces and superfluous parentheses
                around NCVs. Implement through two new options, --clean and
                --preserve, defaulting to the former.

        (2) smart expander: In progress.
            Construct a simplified, high-level expander and query assembler for
                WHEREs similar to the one used for SELECTs
            Add the literal string to the candidate match lists of
                simple right-hand-side expressions
            Design an expander/assembler for UPDATEs to resemble WHEREs & SELECTs
            Add function-name expansion capability
            Add word-sequence expansion capability
            Identify depth of subexpressions from parens and order-of-operations
            Define legal combinations of data types and the types that the
                combinations resolve to
            Resolve the data types of expressions based on their subtrees
            Prune the completion candidate lists based on grammar and context,
                prompting the user only when there is no realistic way to
                figure out his intentions

        (3) query builder: Not yet started.
            Preliminary design work for transformations / "operator overloading"
            Handle the COUNT(*) function
            Old code for handling numeric ranges, regex lists, etc. should be
                integrated into the (anticipated) code for transforming simple
                rvalues into valid SQL

    Finish the automatic sorting of output lines
    Finish the "++" prefix operator for SELECT-type arguments
    Implement -ob,-gb,-go flags for ORDER BY and GROUP BY (-o is already taken)
    Automatically build a HAVING clause when WHERE is not correct
    Perfect the candidate list generation (aka "expand()") by using prioritized
        lists making use of all matching algorithms 
    Preliminary design work for UNION queries
    Preliminary design work for automatic table joining
    Design and implement aliasing (AS...)
    Design an overarching executable script that knows or can read the
        configuration settings for specific table names
    Investigate DELETE and INSERT queries

        <and scores more...>

Style TODO
    Clean up long lines that wrap
    Recheck comments for accuracy, needfulness, and comprehensibility
    Reorganize code into smaller files, focusing on db_functions
    Move should-be global constants into tql_globals
    Consider a case convention for variable and function names
    Consider when & how to indicate scope in variable names
    Clean up the function foldResultSet()
    Rename the source file db_functions
    Rework UPDATE processing to work much the same as WHEREs except that the
        assignment operator is used in place of a comparator
    The expansion routines should put the correct primary and secondary
        delimiters inside the candidate lists right from the get-go. Handler
        code should then be reworked to assume this has been done.
    Clean up the God-function parseCompletely()
    Rewrite in a language that supports object orientation, sophisticated data
        structures, richer variable scoping, better function call & return
        protocol, etc. A large undertaking and a nice-to-have; the above items
        are more important.

Documentation and Presentation TODO
    Explain challenges of debugging (for project wiki)
        Issues with bashdb
            "next <n>" behaves like "step" when a function call is encountered
            regular expressions and the BASH_REMATCH shell variable
        Workarounds
            bash -x
            set -xv, as in my "trace" function
            straightforward echo/printf/od (octal dump)
            pros and cons of testing scripts
        Alternative testing tools/frameworks
            refer to open-source repositories
    Transform this TODO file into a (long?) series of open issues
    Reorganize and rename project files to comply with Github conventions
    The README should be mostly a detailed usage document
    Revisit the comments for accuracy and clarity, especially function headers
    Compose more material for the project blog

Testing TODO
    Work toward activating and running all parser test cases at once
    Parser tests: update for the new token-counting feature
    Use new features as a springboard to flesh out main-module tests
    Integrate with an existing testing framework such as awesome-shell's "bats"

