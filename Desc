#!/usr/bin/env bash

: ${TQL_HOME:=$HOME/tql}
source $TQL_HOME/db_functions

shouldHelpOrExecute "$1" $#; declare -i helpCode=$?
if ((helpCode)); then
    giveHelp "$0" $helpCode both
    doExit
fi

parseOutOptions "$@"; getReturnValues OPTIONS queryArguments
eval set -- $queryArguments

# Initialization
readMetadataAndConfigure "$0" columns || doExit

# Three major steps to prepare the query:
#
# (1) Produce the table-names part of the WHERE clause. This requires special care when the tableNames argument is a comma-separated list.
# (2) Process all the other arguments in the usual way (the where-particles along with any +/- prefixed arguments).
# (0) But first, a little maneuver that enables us to accept the arguments in any order, as long as
#     the tableNames come before the columnNames (if any): we bring the tableNames to the front of the arg list.
#     Then we can perform step (1), shift out $1, and then process everything else in the usual way

# Step (0): Bring table name to the front of the positional parameters
declare parameters
swapValueParameterToFront "$@" && getReturnValue parameters || doExit
eval set -- $parameters

# Step (1): Create the table_name part of the WHERE clause.
if [[ "$1" =~ [.] ]]; then
    # If absolute table name(s) are given (i.e. the database is explicitly named), strip off the DB name. The main query
    # can only accept relative table names. This issue arises e.g. in FindSproc which uses the table "information_schema.routines".
    relativeTable="${1#+([^,.]).}"       # Strip the leading table name
    if [[ "$relativeTable" =~ , ]]; then    # Strip all following table names
        relativeTable=${relativeTable//,+([^,.])./,}
    fi
else
    relativeTable="$1"
fi
# Format the table names properly for the main query
if [[ "$relativeTable" =~ , ]]; then
    generateWhereClause "$relativeTable"; getReturnValue mainWhereClause
    g_config[wherePreclause]+=$mainWhereClause
else
    g_config[wherePreclause]+=" AND table_name LIKE '$relativeTable'"
fi
shift

# Step (2): Normal parsing of everything else

# Reconfigure for the normal parse
g_config[defaultAlpha]=column_name

# Parse the TQL and generate the SQL
parseCompletely "$@" || doExit
getReturnValues  _OPTIONS  ACTION_CLAUSE  WHERE_CLAUSE  LIMIT  sortInstructions  queryType
formQuery $queryType "$ACTION_CLAUSE" "$WHERE_CLAUSE" "$LIMIT"
getReturnValue fullQuery

# Display the query if requested
isOptionOn "q|query" $OPTIONS
if (($?)); then
    setError ${rc[SUCCESS]}
    doExit "$fullQuery"
fi

# Execute the query
if ! RAW_RESULT=$("${TQL_DB_WRAPPER:-mysql}" $g_dbClientOptions -t -e "$fullQuery"); then
    setError $?; doExit "Error running query."
fi

# For SELECT queries, display the result set
if [[ $queryType == ${qt[SELECT]} ]]; then
    foldResultSet "$RAW_RESULT" "$sortInstructions"
fi

doExit

