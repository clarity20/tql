#!/usr/bin/env bash

: ${TQL_HOME:=/HOME/tql}
source $TQL_HOME/db_functions

shouldHelpOrExecute "$1" $#; declare -i helpCode=$?
if ((helpCode)); then
    giveHelp "$0" $helpCode tableRows " "
    doExit
fi

# Parse the cmdline opts
parseOutOptions "$@"
getReturnValues OPTIONS queryArguments
eval set -- $queryArguments

isOptionOn "[0-9]+" $OPTIONS -show
getReturnValue NUMROWS
: ${NUMROWS:=10}

OLDFS=$IFS; IFS=$'\n'

# Fetch and store the table names
TABLE_ARR=($(FindTable "$1" -noHeader))

# Set flag to show the banner if tablename regex or multiple tables were requested
if [[ "$1" =~ [,%] ]]; then
    SHOW_TABLENAME_HEADER=1
fi

for TABLE in ${TABLE_ARR[*]}; do
    # Build a compound SQL command by stringing together the individual queries
    fullQuery+="SELECT * FROM $TABLE LIMIT $NUMROWS;"$'\n'
done

# Call the db engine once and array-ify the result
if ! RAW_RESULT=($("${TQL_DB_WRAPPER:-mysql}" $g_dbClientOptions -t -e "$fullQuery")); then
    setError $?; doExit "Error running query."
fi

lineCount=0

# Break down the result table-by-table
for line in ${RAW_RESULT[*]}; do

    # Keep track of where each table begins in the unified result set
    if [[ $line =~ ^\+ ]]; then
        if ((separatorCount == 0)); then
            ((tableStartLine=lineCount))
        fi
        ((separatorCount++))
    fi

    # At the end of the current table, print it out
    if ((separatorCount == 3)); then

        # Show the banner if required
        if ((SHOW_TABLENAME_HEADER)); then
            echo --------------------- ${TABLE_ARR[tableCount]} ---------------------
            echo ----------------------${TABLE_ARR[tableCount]//?/-}----------------------
            ((tableCount++))
        fi

        # Pretty-print the table
        ((linesInTable=lineCount-tableStartLine+1))
        formatResultSet "${RAW_RESULT[*]:$tableStartLine:$linesInTable}"; getReturnValue formattedResult
        echo "$formattedResult"

        separatorCount=0
    fi

    ((lineCount++))
done

IFS=$OLDFS

